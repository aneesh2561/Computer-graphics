#include<GL/glut.h>
#include<cmath>
#include<stdio.h>
#include <windows.h>
#include <chrono>
#include <thread>
#include <time.h>
#include <vector>

int** stars;
void generateStars() {
	int M = 1000, N = 450;
	stars = new int* [25];
	for (int i = 0; i < 25; i++) {
		// the square is N x N, so you want two numbers from 0 to N-1
		stars[i] = new int[2];

		int x = rand() % M;
		int y = rand() % N;
		y = 1000 - y;
		stars[i][0] = x;
		stars[i][1] = y;
	}
}

void plotStars() {
	glBegin(GL_POINTS);
	glColor3f(1, 1, 1);
	for (int i = 0; i < 25; ++i) {
		glVertex2f(stars[i][0], stars[i][1]);
	}
	glEnd();
}

void drawCircle(float cx, float cy, float r, int num_segments)
{
	float theta = 3.1415926 * 2 / float(num_segments);
	float tangetial_factor = tanf(theta);//calculate the tangential factor 

	float radial_factor = cosf(theta);//calculate the radial factor 

	float x = r;//we start at angle = 0 

	float y = 0;
	glLineWidth(2);
	glBegin(GL_POLYGON);
	for (int ii = 0; ii < num_segments; ii++)
	{
		glVertex2f(x + cx, y + cy);//output vertex 

		//calculate the tangential vector 
		//remember, the radial vector is (x, y) 
		//to get the tangential vector we flip those coordinates and negate one of them 

		float tx = -y;
		float ty = x;

		//add the tangential vector 

		x += tx * tangetial_factor;
		y += ty * tangetial_factor;

		//correct using the radial factor 

		x *= radial_factor;
		y *= radial_factor;
	}
	glEnd();
}


void boat(int h, int river_ht, int i, bool remove_boat) {
	glBegin(GL_POLYGON);
	//angle required = 45 degree so adjust x axis of base
	int base_x_factor = h;
	if (!remove_boat)
		glColor3f(1, 0, 0);
	else
		glColor3f(0, 0, 0);
	glVertex2f(0 + i, river_ht + h);



	glVertex2f(i + 150 + 2 * h, river_ht + h);
	//base
	glVertex2f(i + 150 + base_x_factor, river_ht);
	glVertex2f(i + base_x_factor, river_ht);
	glEnd();


	//triangle of boat
	glBegin(GL_POLYGON);
	double dist = 50 * sqrt(3);
	if (!remove_boat)
		glColor3f(1, 1, 0);
	else
		glColor3f(0, 0, 0);
	glVertex2f(i + h + 25, river_ht + h);
	glVertex2f(i + h + 75, dist + river_ht + h);
	glVertex2f(i + h + 125, river_ht + h);
	glEnd();
}

void river(int h) {
	glBegin(GL_POLYGON);
	glColor3f(0.2, 0.5, 1.0);
	glVertex2f(0, h);
	glVertex2f(1000, h);
	glVertex2f(1000, 0);
	glVertex2f(0, 0);
	glEnd();
}

void move_boat(int h, int river_ht) {

	int i = 0;
	float sun_pos = 0;
	float blue=0;
	int prev = -(150 + 2 * h);
	while (true) {
		for (i = -(150 + 2 * h); i <= 1000; ++i) {
			//boat_plotted = false;
					//std::this_thread::sleep_for(std::chrono::milliseconds(5000));
					//boat(h, river_ht, i, true);

			glClearColor(0.0 + blue, 0.0 + (blue*0.647), 0.0, 1.0);
			if (i - prev == 250) {
				blue += 0.1;
				prev = i;
			}
			if (blue > 1)blue = 0;

			glColor3f(0.0, 0.0, 0.0);
			glClear(GL_COLOR_BUFFER_BIT);

			river(river_ht + 10);
			plotStars();
			glColor4f(1 - blue, 1 - blue, 1 - blue , 1);

			//glColor3f(1, 1, 1);
			drawCircle(125 + sun_pos, 800, 50, 360);
			sun_pos += 0.3;
			if (sun_pos + 125 > 950)sun_pos = 0;
			boat(h, river_ht, i, false);
			glFlush();

			Sleep(5);


		}
	}
}


void display() {
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glColor3f(0.0, 0.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT);

	//river(300);
	generateStars();
	move_boat(75, 300);

	glFlush();
}

void myinit() {
	glClearColor(0, 0, 0, 0);
	glLoadIdentity();
	gluOrtho2D(0, 900, 0, 900);
}



int main(int argv, char** argc) {
	glutInit(&argv, argc);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(900, 900);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("Lab");
	myinit();
	glutDisplayFunc(display);
	glutMainLoop();
}
